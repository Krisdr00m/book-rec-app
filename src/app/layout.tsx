'use client'
import "./globals.css";
import React, { useEffect, useState } from 'react';
import AuthContext from "./auth-context";
import {User} from '@supabase/supabase-js';
import { createBrowserCli } from "./lib/api/supabase";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

/**
 * TODO: Look into this a but more why cant I use use client and should I be using useeffect at the highest level
 * @param param0 
 * @returns 
 */
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [user, setUser] = useState<User | null>(null);
  
  useEffect(() => {
    const fetchUser = async () => {
      const supabase = await createBrowserCli();
      //TODO: need to filter based on the action that is happening so that the session ins managed depending on the action
      //Right now only have login in place so need to cover all the other cases
      const { data } =  await supabase.auth.onAuthStateChange((event, session) => {
        setUser(session?.user || null);
      });

      return () => {
        data.subscription.unsubscribe();
      }
  }

  fetchUser();
}, [])

  return (
    <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
          style={{backgroundColor: 'white', color: 'black'}}
        >
      <AuthContext.Provider value={user}>
        {children}
      </AuthContext.Provider>
      </body>
    </html> 
  );
}
